// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../assets/config/app.toml (742B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configAppToml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x52\x3b\x6f\xdb\x30\x10\xde\xf9\x2b\x0e\xcc\x9a\xaa\x52\x0c\x38\x48\x50\x17\xed\xd2\xa9\xdd\xba\x19\x86\x41\x89\xe7\x88\x08\x5f\xbe\x23\xed\xea\xdf\x17\x27\xc5\x8f\x2c\x02\xf8\xf1\xf4\xbd\x8e\x5b\x93\xb3\x77\x83\x29\x2e\xc5\x9d\x8a\x26\x20\x6c\x40\x0f\xe9\xe4\xac\x56\x27\x24\x76\x29\x0a\xd2\x36\x5d\xd3\x6a\x65\x6a\x19\x13\x31\x6c\x60\xab\xff\xb8\x61\x34\xe8\xe1\xb7\x83\x6f\xc6\xbb\x30\xfd\x78\x73\xde\x95\xa9\x89\x58\xbe\xeb\x9d\xb2\xc8\x03\xb9\x5c\x3e\x18\x66\xce\xee\x05\x5c\x3c\x24\x0a\xb3\x20\x30\xd2\xc9\x0d\xa8\xd5\x03\xfc\xcc\x19\xa8\x46\x08\xc9\xe2\x23\xa0\x2b\x23\x12\x68\x8b\x27\xf4\x29\xeb\x47\xd0\x99\x92\xad\x43\xd1\x8a\x6a\xdc\xcb\x94\x90\x5e\x41\xb5\x15\x2e\xdc\x29\x63\x2d\xc9\xcd\x6b\xd7\x76\xeb\x17\xb9\xb0\xa6\x98\xde\x30\xee\xd4\x03\xfc\x1d\x11\x2e\x67\xe8\xcd\xf0\x8e\xd1\xde\xd4\x72\xe2\xf2\x46\xc8\x22\x17\x26\x3e\x7a\x0d\x9a\x8f\xde\x15\x5c\x69\x48\x04\x3a\xb0\x80\x8d\x2a\x53\x9e\xe5\x97\x21\x35\x26\x2e\x72\xec\x9e\x9e\x9b\xb6\x69\x9b\xee\x75\xb5\x6a\xd7\xfa\x5a\xa7\xed\xf7\x98\x9d\xc5\xe0\x06\xad\x2a\x23\xdd\xf5\xa1\x55\x36\xcc\xe7\x44\x16\x36\x0b\xf6\xd4\x2e\x28\x99\x20\x73\x52\xce\xaf\x74\xef\x0e\x52\xf4\xd3\x5d\x47\x8e\x4d\xef\x51\x4c\x13\x1e\xab\x23\x5c\xcc\x9e\x90\xdc\x61\xfa\x72\xa8\x5e\x2c\x33\xfb\x6b\x6b\x97\x3f\x2e\xcc\xb7\x8c\x33\x71\x30\xef\x08\x5c\x09\xa1\x24\xa8\x8c\x60\x7a\x4e\xbe\x16\x84\x6c\xca\xd8\x28\xf9\xce\x34\xa6\x98\xaf\x97\x60\x8d\xed\xa5\x6c\x42\xeb\xf8\xb6\x85\x5b\x23\xeb\xd5\xf3\xa7\xac\x12\xcc\xf6\xb0\x81\x56\x56\xb4\xac\x59\x36\x74\x1e\x71\x8e\x25\xba\x07\x31\xe2\x42\xf6\x18\x30\x96\xe5\xc9\xa4\x03\xfc\x4b\x14\xe4\x9d\x54\x8f\x4a\x3c\x9c\x0d\xe1\x7e\x9e\xdd\x40\xa1\x8a\x6a\x30\xc3\xf8\x09\xf9\x1f\x00\x00\xff\xff\x9a\x65\x85\x79\xe6\x02\x00\x00"

func configAppTomlBytes() ([]byte, error) {
	return bindataRead(
		_configAppToml,
		"config/app.toml",
	)
}

func configAppToml() (*asset, error) {
	bytes, err := configAppTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/app.toml", size: 742, mode: os.FileMode(0644), modTime: time.Unix(1585476935, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1d, 0xc0, 0x36, 0x38, 0xf6, 0x31, 0xa2, 0x4a, 0xf6, 0x30, 0x54, 0xbe, 0x8c, 0x68, 0xff, 0x8a, 0x0, 0xba, 0xa5, 0x42, 0xc1, 0x97, 0x63, 0x98, 0xff, 0xc7, 0xe7, 0x1b, 0xe5, 0x1a, 0xfc, 0x4}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/app.toml": configAppToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"app.toml": {configAppToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
