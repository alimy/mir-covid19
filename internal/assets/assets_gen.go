// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../assets/config/app.toml (662B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configAppToml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x91\xcd\x6e\xdb\x30\x10\x84\xef\x7c\x8a\x05\x73\x4d\x55\x29\x06\x52\x24\xa8\x8b\xf6\xd2\x53\x7b\xeb\xcd\x30\x0c\x4a\x5c\x59\x8b\xf0\xcf\xbb\xa4\x52\xbd\x7d\x41\x29\xae\x7d\x11\xc8\xd1\xf0\xe3\xec\xf0\x60\x52\x72\x34\x98\x4c\x31\x1c\x55\x30\x1e\x61\x0f\x7a\x88\x33\x59\xad\x66\x64\xa1\x18\xaa\xd2\x36\x5d\xd3\x6a\x65\x4a\x9e\x22\x0b\xec\xe1\xa0\x7f\xd3\x30\x19\x74\xf0\x8b\xe0\xab\x71\xe4\x97\xef\x67\x72\x94\x97\x26\x60\xfe\xa6\x8f\xca\xa2\x0c\x4c\x29\x7f\x10\x56\x66\xf7\x02\x14\xc6\xc8\x7e\xbd\x10\x04\x79\xa6\x01\xb5\x52\x87\xba\xc4\xa3\x32\xd6\x72\x75\xbf\x76\x6d\xf7\xfc\xa2\xd5\x03\xfc\x48\x09\xb8\x04\xf0\xd1\xe2\x23\x20\xe5\x09\x19\xb4\xc5\xbe\x9c\xf5\x23\xe8\xc4\xd1\x96\x21\x6b\xc5\x25\x9c\xaa\xa7\x9e\xde\xfe\x2a\x75\xb0\x26\x9b\xde\x08\x1e\xd5\x03\xfc\x99\x10\xae\x7b\xe8\xcd\xf0\x86\xc1\xde\x80\x29\x4a\x3e\x33\x4a\x65\xfa\x45\x2e\x4e\x83\x96\x8b\xa3\x8c\x3b\x0d\x91\x41\x7b\xa9\x62\xa3\xf2\x92\xd6\x3b\x36\x93\x9a\xa2\xe4\xba\xed\x9e\xbe\x34\x6d\xd3\x36\xdd\xeb\x6e\xd7\x3e\xeb\xff\x55\xda\xfe\x84\x89\x2c\x7a\x1a\xb4\x2a\x82\x7c\xd7\x85\x56\xc9\x88\xbc\x47\xb6\xb0\xdf\xb4\xa7\x76\x53\xd9\xf8\xea\xab\xf3\xff\x8c\xf7\xe9\x20\x06\xb7\xdc\xd5\x40\x62\x7a\x87\x35\x34\xe3\xa5\x10\xe3\x16\x76\x46\xa6\x71\xf9\x34\x16\x57\x23\x8b\xb8\x5b\x35\x1f\x27\xae\xe4\xdb\x8c\x2b\xd8\x9b\x37\x04\x29\x8c\x90\x23\x14\x41\x30\xbd\x44\x57\x32\x42\x32\x79\x6a\x54\xfd\xae\x18\x93\xcd\xe7\xeb\x60\x8d\xed\xd7\xb2\x71\x46\x17\x53\xed\xfa\x7d\xc2\x35\x60\x25\x8c\x15\x49\x3e\x39\xf4\x18\xf2\xf6\xf0\x71\x84\xbf\x91\x7d\x7d\xd4\xe2\x50\xd5\xf5\x69\xf5\xed\x21\x73\xc1\x7f\x01\x00\x00\xff\xff\x41\xb2\xee\xae\x96\x02\x00\x00"

func configAppTomlBytes() ([]byte, error) {
	return bindataRead(
		_configAppToml,
		"config/app.toml",
	)
}

func configAppToml() (*asset, error) {
	bytes, err := configAppTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/app.toml", size: 662, mode: os.FileMode(0644), modTime: time.Unix(1585405388, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5e, 0x68, 0xef, 0xb5, 0x68, 0x40, 0x35, 0x2d, 0x7c, 0x1b, 0x86, 0x26, 0xb, 0xf5, 0x84, 0x4f, 0x5a, 0xac, 0xa6, 0x43, 0x25, 0xac, 0x20, 0x6d, 0xee, 0x51, 0xad, 0x66, 0xd5, 0x7b, 0x12, 0x4c}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/app.toml": configAppToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"app.toml": {configAppToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
